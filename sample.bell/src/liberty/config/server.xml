<?xml version="1.0" encoding="UTF-8"?>
<!--
     Copyright 2018 International Business Machines Corp.

     See the NOTICE file distributed with this work for additional information
     regarding copyright ownership. Licensed under the Apache License, 
     Version 2.0 (the "License"); you may not use this file except in compliance
     with the License. You may obtain a copy of the License at
     
       http://www.apache.org/licenses/LICENSE-2.0
 
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<server description="server1">

    <!-- Enable features -->
    <featureManager>
      <feature>jsp-2.3</feature>
      <feature>oauth-2.0</feature>
      <feature>openidConnectServer-1.0</feature>
      <feature>ssl-1.0</feature>
      <feature>bells-1.0</feature>
    </featureManager>

    <!-- To access this server from a remote client add a host attribute to the following element, e.g. host="*" -->
    <httpEndpoint id="defaultHttpEndpoint"
                  httpPort="${httpPort}"
                  httpsPort="${httpsPort}" />

    <!-- 
	 Create a shared library that includes the JAR that contains the OAuthStore implementation
	 and any runtime dependencies. Our sample build copied all of the JARs into a single directory
	 so we will point to that directory.
    -->    
    <library id="customStoreLib">
      <fileset dir="${wlp.user.dir}/shared/resources/libs" includes="*.jar"/>
    </library>

    <!--
	Create the BELL using the shared library that contains the OAuthStore implementation
	as well as the runtime dependencies.
    -->
    <bell libraryRef="customStoreLib" />
    
    <!-- 
         Configure the OIDC provider to use the OAuth provider that defines the custom store
         using the OAuthStore implementation.
    -->
    <openidConnectProvider id="OidcConfigSample" oauthProviderRef="OauthConfigSample" />

    <!--
         Configure the OAuth provider. The authorization code and consent cache entry lifetime
         is short so that the test can test token cleanup without waiting for a long time.
    -->
    <oauthProvider
         id="OauthConfigSample"
         oauthOnly="false"
         authorizationCodeLifetime="5"
         consentCacheEntryLifetime="5"> 

      <!--  
           Configure the customStore to use the implementation that is loaded in the BELL. This
           requires that the 'storeId' attribute value matches the 'oauth.store.id' property that
           was set for that implementation in the provider configuration file in the JAR that 
           contains the OAuthStore implementation.

           We set a short cleanupExpiredInterval so that automated cleanup of expired tokens occurs
           in short intervals. This is a *very* short interval and is for demonstration purposes only.
           Production servers would likely not benefit from such a short interval.	   
      -->
      <customStore storeId="mongoDbStore" cleanupExpiredInterval="5"/>

    </oauthProvider>

    <!-- 
         Configure the OIDC client. Use the information provided when registering 
         the client. In our case, we are using the client data we will use to register 
		 the client in the 'sample.test' project. 
     -->
    <openidConnectClient id="client01"
		clientId="client01" clientSecret="secret01"
		authorizationEndpointUrl="https://localhost:${httpsPort}/oidc/endpoint/OidcConfigSample/authorize"
		tokenEndpointUrl="https://localhost:${httpsPort}/oidc/endpoint/OidcConfigSample/token">
    </openidConnectClient>

    <oauth-roles>
      <!-- To register the client, a user with the 'clientManager' OAuth role must be used. -->
      <clientManager>
        <user name="testuser" />
      </clientManager>
      
      <!-- To authenticate the client, a user with the 'authenticated' OAuth role must be used. -->
      <authenticated>
        <user name="testuser" />
      </authenticated>
    </oauth-roles>

    <basicRegistry id="basic" realm="BasicRealm">
      <user name="testuser" password="password" />
    </basicRegistry>

    <webAppSecurity allowFailOverToBasicAuth="true" />

    <!--
	Enable trace for security. The string, security.custom.store.*=all, traces the classes in the bell.
    -->
    <logging traceSpecification="*=info:com.ibm.ws.security.*=all:com.ibm.websphere.security.*=all:security.custom.store.*=all"/>
</server>
