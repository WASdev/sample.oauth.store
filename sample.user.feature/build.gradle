apply plugin: 'liberty'
apply plugin: 'eclipse'

description = "Liberty OAuthStore User Feature Sample repo"
jar.baseName = 'security.custom.store'

def wlpRoot = "${buildDir}/wlp"
def wlpServerName = "server1"

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:2.4.+'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.mongodb:mongodb-driver-sync:3.9.1'
    compileOnly group: 'com.ibm.websphere.appserver.api', name: 'com.ibm.websphere.appserver.api.oauth', version: '[1.2.23,)'
    libertyRuntime group: 'com.ibm.websphere.appserver.runtime', name: 'wlp-kernel', version: '[18.0.0.4,)'
    compile group: 'org.osgi', name: 'osgi_R4_core', version: '1.0' // needed for bundle Activator class
    compile group: 'org.osgi', name: 'org.osgi.service.cm', version: '1.6.0' // needed for ManagedService/config from server.xml
    compile group: 'javax.xml.crypto', name: 'jsr105-api', version: '1.0.1' // needed if doing authorization on MongoDB
}

ext {
    httpPort = 8080
    httpsPort = 8443
}

// Load mongoDB config from the SupportFiles/mongoDB.props.
// This information is referenced from the server.xml and stored in a bootstrap.properties file
// The User Feature reads this configuration during runtime using Activator and MongoDBHelper.
def Properties props = new Properties()
def propFile = file('../SupportFiles/mongoDB.props')
def databaseName;
def hostname;
def port;
def user;
def password;

if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('DBNAME')) {
        databaseName = props['DBNAME']
    }

    if (props!=null && props.containsKey('HOST')) {
        hostname = props['HOST']
    }
    
    if (props!=null && props.containsKey('PORT')) {
        port = props['PORT']
    }
    
    if (props!=null && props.containsKey('USER')) {
        user = props['USER']
    }
    
    if (props!=null && props.containsKey('PWD')) {
        password = props['PWD']
    }
}

liberty {
    server {
        features {
            name = ['openidconnectserver-1.0']
            acceptLicense = true
        }

        name = "${wlpServerName}"
        bootstrapProperties = ['httpPort': httpPort, 'httpsPort': httpsPort, 'databaseName' : databaseName, 'hostname' : hostname, 'port' : port, 'user' : user, 'password' : password]
        configDirectory = file('src/liberty/config')
    }
}

libertyStart.doFirst {
    /*
     * Copy the user feature JAR and the feature manifest to the Liberty
     * extensions directory. Replace the '-' with a '_' as OSGi expects
     * an underscore in the filename for the bundle JAR.
     */
    copy {
        from "${jar.archivePath}"
        into "${wlpRoot}/usr/extension/lib"
        rename '(.*)-(.*)', '$1_$2'
    }
    copy {
        from "${projectDir}/resources/customStoreSample-1.0.mf"
        into "${wlpRoot}/usr/extension/lib/features"
    }

    /*
     * Copy the MongoDB properties file to the server.
     */
    copy {
        from "${rootDir}/SupportFiles/mongoDB.props"
        into "${wlpRoot}/usr/servers/${wlpServerName}"
    }
}

jar {
    /*
     * Use our manifest and update the classpath for the bundle to include any runtime dependencies.
     */
    manifest {
    	from(['src/main/resources/META-INF/MANIFEST.MF'])
        attributes 'Bundle-ClassPath' : '.,' + configurations.runtime.collect { 'lib/' + it.getName() }.join(',')
    }

    /*
     * Include the runtime dependencies in the JAR's 'lib' directory.
     */
    into('lib') {
        from configurations.runtime
    }
}

/*
 * Targets for starting and stopping the Liberty server.
 */
clean.dependsOn 'libertyStop'
libertyPackage.dependsOn 'libertyStop'
libertyStart.dependsOn 'libertyStop', 'jar'
libertyRun.dependsOn 'libertyStop'

task start { dependsOn 'libertyStart' }
task stop  { dependsOn 'libertyStop' }
